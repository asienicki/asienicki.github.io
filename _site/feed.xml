<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-07-17T21:47:18+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">devlopr jekyll</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>devlopr</name></author><entry><title type="html">Hello Blazor</title><link href="http://localhost:4000/hello-blazor/" rel="alternate" type="text/html" title="Hello Blazor" /><published>2018-10-15T23:17:42+02:00</published><updated>2018-10-15T23:17:42+02:00</updated><id>http://localhost:4000/hello-blazor</id><content type="html" xml:base="http://localhost:4000/hello-blazor/">&lt;p&gt;W ostatnich dniach na “&lt;em&gt;ołpen spejsach”&lt;/em&gt; i &lt;em&gt;“salonach internetowych”&lt;/em&gt; tematem numer 1 jest WebAssembly.&lt;/p&gt;

&lt;p&gt;Zaciekawiony, postanowiłem przyjrzeć się tematowi bliżej.&lt;/p&gt;

&lt;p&gt;Nowy twór MSu - &lt;a href=&quot;http://blazor.net/&quot;&gt;Blazor&lt;/a&gt; jest implementacją &lt;a href=&quot;http://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt; w .NET.&lt;/p&gt;

&lt;p&gt;Jak to &lt;a href=&quot;http://blazor.net/docs/get-started.html&quot;&gt;wygląda w praktyce&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Po pierwsze musimy mieć zainstalowany &lt;a href=&quot;http://www.microsoft.com/net/download&quot;&gt;.NET Core 2.1&lt;/a&gt; (&amp;gt;=2.1.402). Przyda się też rozszerzenie do naszego Visual Studio:  &lt;a href=&quot;http://marketplace.visualstudio.com/items?itemName=aspnet.blazor&quot;&gt;ASP.NET Core Blazor Language Services.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tworzymy nowy projekt typu “ &lt;strong&gt;ASP.NET Core Web Application&lt;/strong&gt;” i wybieramy szablon “Blazor”.&lt;/p&gt;

&lt;p&gt;F5 i &lt;strong&gt;hello world&lt;/strong&gt; zrobił się sam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/helloWorldBlazor.png&quot; alt=&quot;hello World Blazor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Świeżo stworzona solucja:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blazorHelloWorldSolution.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podgląd ładowanych zasobów:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Debug]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blazorHelloWorldNetwork.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Release]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blazorHelloWorldNetworkRelease.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;i faktycznie… serwer zwrócił 13 plików z roszerzeniem dll.&lt;/p&gt;

&lt;p&gt;Pierwszą rzeczą jaką zapragnąłem zrobić było pobranie pliku “&lt;em&gt;BlazorHelloWorld.WebApp.dll&lt;/em&gt;” i otworzeniu go/jej w dotpeek :)&lt;/p&gt;

&lt;p&gt;Proszę bardzo, tak to wygląda:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blazorHelloWorldAfterDotPeek.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Porównałem zawartość dllki z tym co znajduje się w projekcie i mamy odwzorowanie 1 do 1. Każdy widok (to dalej jest widok?;)) - każdy plik o rozszerzeniu cshtml odpowiada klasie.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/helloWorldBlazorDllVsCode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na pierwszy ogień dekompiluje klasę _ViewImport. Rezultat niżej.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using BlazorHelloWorld.WebApp.Shared; using Microsoft.AspNetCore.Blazor.Components; using Microsoft.AspNetCore.Blazor.Layouts; using Microsoft.AspNetCore.Blazor.RenderTree; namespace BlazorHelloWorld.WebApp.Pages { [Layout(typeof (MainLayout))] public class \_ViewImports : BlazorComponent { protected override void BuildRenderTree(RenderTreeBuilder builder) { base.BuildRenderTree(builder); } } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Zaciekawił mnie tylko atrybut Layout. Cieszy mnie podejście komponentowe, a tak poza tym zgodnie z przewidywaniami ta klasa poza podtrzymaniem życia BuildRenderTree nic nie robi.&lt;/p&gt;

&lt;p&gt;Layout:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Decompiled with JetBrains decompiler // Type: BlazorHelloWorld.WebApp.Shared.MainLayout // Assembly: BlazorHelloWorld.WebApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null // MVID: 5CE28297-B925-4548-A5E1-DAFA2DB6D448 // Assembly location: C:\Users\Krzemik\Downloads\BlazorHelloWorld.WebApp.dll using Microsoft.AspNetCore.Blazor.Layouts; using Microsoft.AspNetCore.Blazor.RenderTree; namespace BlazorHelloWorld.WebApp.Shared { public class MainLayout : BlazorLayoutComponent { protected override void BuildRenderTree(RenderTreeBuilder builder) { base.BuildRenderTree(builder); builder.OpenElement(0, &quot;div&quot;); builder.AddAttribute(1, &quot;class&quot;, &quot;sidebar&quot;); builder.AddContent(2, &quot;\n &quot;); builder.OpenComponent\&amp;lt;NavMenu\&amp;gt;(3); builder.CloseComponent(); builder.AddContent(4, &quot;\n&quot;); builder.CloseElement(); builder.AddContent(5, &quot;\n\n&quot;); builder.OpenElement(6, &quot;div&quot;); builder.AddAttribute(7, &quot;class&quot;, &quot;main&quot;); builder.AddContent(8, &quot;\n &quot;); builder.AddMarkupContent(9, &quot;\&amp;lt;div class=\&quot;top-row px-4\&quot;\&amp;gt;\n \&amp;lt;a href=\&quot;http://blazor.net\&quot; target=\&quot;\_blank\&quot; class=\&quot;ml-md-auto\&quot;\&amp;gt;About\&amp;lt;/a\&amp;gt;\n \&amp;lt;/div\&amp;gt;\n\n &quot;); builder.OpenElement(10, &quot;div&quot;); builder.AddAttribute(11, &quot;class&quot;, &quot;content px-4&quot;); builder.AddContent(12, &quot;\n &quot;); builder.AddContent(13, this.Body); builder.AddContent(14, &quot;\n &quot;); builder.CloseElement(); builder.AddContent(15, &quot;\n&quot;); builder.CloseElement(); } } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;W szablonie dzieje się już jakaś akcja :)&lt;/p&gt;

&lt;p&gt;Widzimy, że Layout dziedziczy po innej klasie niż _ViewImports.&lt;/p&gt;

&lt;p&gt;W BuildRenderTree najpierw wykonuje bazową metodę budowania drzewa, a następnie drzewo jest rozbudowywane o elementy html’a.&lt;/p&gt;

&lt;p&gt;Na uwagę zasługuje:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;builder.OpenComponent\&amp;lt;NavMenu\&amp;gt;(3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;W końcu to coś innego niż tworzenie elementów html i dodawanie do nich atrybutów.&lt;/p&gt;

&lt;p&gt;NavMenu:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class NavMenu : BlazorComponent { private bool collapseNavMenu = true; protected override void BuildRenderTree(RenderTreeBuilder builder) { base.BuildRenderTree(builder); builder.OpenElement(0, &quot;div&quot;); builder.AddAttribute(1, &quot;class&quot;, &quot;top-row pl-4 navbar navbar-dark&quot;); builder.AddContent(2, &quot;\n &quot;); builder.AddMarkupContent(3, &quot;\&amp;lt;a class=\&quot;navbar-brand\&quot; href=\&quot;\&quot;\&amp;gt;BlazorHelloWorld.WebApp\&amp;lt;/a\&amp;gt;\n &quot;); builder.OpenElement(4, &quot;button&quot;); builder.AddAttribute(5, &quot;class&quot;, &quot;navbar-toggler&quot;); builder.AddAttribute(6, &quot;onclick&quot;, BindMethods.GetEventHandlerValue\&amp;lt;UIMouseEventArgs\&amp;gt;(new Action(this.ToggleNavMenu))); builder.AddMarkupContent(7, &quot;\n \&amp;lt;span class=\&quot;navbar-toggler-icon\&quot;\&amp;gt;\&amp;lt;/span\&amp;gt;\n &quot;); builder.CloseElement(); builder.AddContent(8, &quot;\n&quot;); builder.CloseElement(); builder.AddContent(9, &quot;\n\n&quot;); builder.OpenElement(10, &quot;div&quot;); builder.AddAttribute(11, &quot;class&quot;, this.collapseNavMenu ? &quot;collapse&quot; : (string) null); builder.AddAttribute(12, &quot;onclick&quot;, BindMethods.GetEventHandlerValue\&amp;lt;UIMouseEventArgs\&amp;gt;(new Action(this.ToggleNavMenu))); builder.AddContent(13, &quot;\n &quot;); builder.OpenElement(14, &quot;ul&quot;); builder.AddAttribute(15, &quot;class&quot;, &quot;nav flex-column&quot;); builder.AddContent(16, &quot;\n &quot;); builder.OpenElement(17, &quot;li&quot;); builder.AddAttribute(18, &quot;class&quot;, &quot;nav-item px-3&quot;); builder.AddContent(19, &quot;\n &quot;); builder.OpenComponent\&amp;lt;NavLink\&amp;gt;(20); builder.AddAttribute(21, &quot;class&quot;, &quot;nav-link&quot;); builder.AddAttribute(22, &quot;href&quot;, &quot;&quot;); builder.AddAttribute(23, &quot;Match&quot;, (object) RuntimeHelpers.TypeCheck\&amp;lt;NavLinkMatch\&amp;gt;(NavLinkMatch.Prefix)); builder.AddAttribute(24, &quot;ChildContent&quot;, (MulticastDelegate) (builder2 =\&amp;gt; builder2.AddMarkupContent(25, &quot;\n \&amp;lt;span class=\&quot;oi oi-home\&quot; aria-hidden=\&quot;true\&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Home\n &quot;))); builder.CloseComponent(); builder.AddContent(26, &quot;\n &quot;); builder.CloseElement(); builder.AddContent(27, &quot;\n &quot;); builder.OpenElement(28, &quot;li&quot;); builder.AddAttribute(29, &quot;class&quot;, &quot;nav-item px-3&quot;); builder.AddContent(30, &quot;\n &quot;); builder.OpenComponent\&amp;lt;NavLink\&amp;gt;(31); builder.AddAttribute(32, &quot;class&quot;, &quot;nav-link&quot;); builder.AddAttribute(33, &quot;href&quot;, &quot;counter&quot;); builder.AddAttribute(34, &quot;ChildContent&quot;, (MulticastDelegate) (builder2 =\&amp;gt; builder2.AddMarkupContent(35, &quot;\n \&amp;lt;span class=\&quot;oi oi-plus\&quot; aria-hidden=\&quot;true\&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Counter\n &quot;))); builder.CloseComponent(); builder.AddContent(36, &quot;\n &quot;); builder.CloseElement(); builder.AddContent(37, &quot;\n &quot;); builder.OpenElement(38, &quot;li&quot;); builder.AddAttribute(39, &quot;class&quot;, &quot;nav-item px-3&quot;); builder.AddContent(40, &quot;\n &quot;); builder.OpenComponent\&amp;lt;NavLink\&amp;gt;(41); builder.AddAttribute(42, &quot;class&quot;, &quot;nav-link&quot;); builder.AddAttribute(43, &quot;href&quot;, &quot;fetchdata&quot;); builder.AddAttribute(44, &quot;ChildContent&quot;, (MulticastDelegate) (builder2 =\&amp;gt; builder2.AddMarkupContent(45, &quot;\n \&amp;lt;span class=\&quot;oi oi-list-rich\&quot; aria-hidden=\&quot;true\&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Fetch data\n &quot;))); builder.CloseComponent(); builder.AddContent(46, &quot;\n &quot;); builder.CloseElement(); builder.AddContent(47, &quot;\n &quot;); builder.CloseElement(); builder.AddContent(48, &quot;\n&quot;); builder.CloseElement(); } private void ToggleNavMenu() { this.collapseNavMenu = !this.collapseNavMenu; } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sporo kodu w zdecydowanej większość proste budowanie elementów, ale przyjrzyjmy się bliżej wybranym fragmentom.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private bool collapseNavMenu = true; builder.AddAttribute(11, &quot;class&quot;, this.collapseNavMenu ? &quot;collapse&quot; : (string) null); builder.AddAttribute(6, &quot;onclick&quot;, BindMethods.GetEventHandlerValue\&amp;lt;UIMouseEventArgs\&amp;gt;(new Action(this.ToggleNavMenu))); private void ToggleNavMenu() { this.collapseNavMenu = !this.collapseNavMenu; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mamy tutaj użytą metodę onclick podpiętą do zdarzenia ToggleNavMenu. Nice… nazwa “&lt;a href=&quot;http://blazor.net/api/Microsoft.AspNetCore.Blazor.UIMouseEventArgs.html&quot;&gt;UIMouseEventArgs&lt;/a&gt;” pachnie trochę wpf’em.&lt;/p&gt;

&lt;p&gt;Zobaczmy jak to zrobić od jedynej słusznej strony. NavMenu.cshtml:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&amp;lt;button class=&quot;navbar-toggler&quot; onclick=@ToggleNavMenu\&amp;gt; \&amp;lt;span class=&quot;navbar-toggler-icon&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; \&amp;lt;/button\&amp;gt; \&amp;lt;div class=@(collapseNavMenu ? &quot;collapse&quot; : null) onclick=@ToggleNavMenu\&amp;gt; \&amp;lt;ul class=&quot;nav flex-column&quot;\&amp;gt; \&amp;lt;li class=&quot;nav-item px-3&quot;\&amp;gt; \&amp;lt;NavLink class=&quot;nav-link&quot; href=&quot;&quot; Match=NavLinkMatch.Prefix\&amp;gt; \&amp;lt;span class=&quot;oi oi-home&quot; aria-hidden=&quot;true&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Home \&amp;lt;/NavLink\&amp;gt; \&amp;lt;/li\&amp;gt; \&amp;lt;li class=&quot;nav-item px-3&quot;\&amp;gt; \&amp;lt;NavLink class=&quot;nav-link&quot; href=&quot;counter&quot;\&amp;gt; \&amp;lt;span class=&quot;oi oi-plus&quot; aria-hidden=&quot;true&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Counter \&amp;lt;/NavLink\&amp;gt; \&amp;lt;/li\&amp;gt; \&amp;lt;/ul\&amp;gt; \&amp;lt;/div\&amp;gt; @functions { bool collapseNavMenu = true; void ToggleNavMenu() { collapseNavMenu = !collapseNavMenu; } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wygląda prosto. Mamy sekcję &lt;em&gt;functions&lt;/em&gt;, która pozwala nam na stworzenie metody i zmiennych. Z poziomu razor’a podpinamy do metody onclick zdefiniowaną niżej metodę.&lt;/p&gt;

&lt;p&gt;A jak to wygląda w html’u?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&amp;lt;button class=&quot;navbar-toggler&quot;\&amp;gt;\&amp;lt;!--!--\&amp;gt; \&amp;lt;span class=&quot;navbar-toggler-icon&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; \&amp;lt;/button\&amp;gt; \&amp;lt;ul class=&quot;nav flex-column&quot;\&amp;gt; \&amp;lt;li class=&quot;nav-item px-3&quot;\&amp;gt; \&amp;lt;!--!--\&amp;gt;\&amp;lt;a class=&quot;nav-link active&quot; href=&quot;&quot; match=&quot;Prefix&quot;\&amp;gt;\&amp;lt;!--!--\&amp;gt; \&amp;lt;span class=&quot;oi oi-home&quot; aria-hidden=&quot;true&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Home \&amp;lt;/a\&amp;gt; \&amp;lt;/li\&amp;gt; \&amp;lt;li class=&quot;nav-item px-3&quot;\&amp;gt; \&amp;lt;!--!--\&amp;gt;\&amp;lt;a class=&quot;nav-link&quot; href=&quot;counter&quot;\&amp;gt;\&amp;lt;!--!--\&amp;gt; \&amp;lt;span class=&quot;oi oi-plus&quot; aria-hidden=&quot;true&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Counter \&amp;lt;/a\&amp;gt; \&amp;lt;/li\&amp;gt; \&amp;lt;/ul\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Żadnych onclick’ów bezpośrednio w javascript. Zdarzenie zarejestrowane jest w webAssembly. Rąbka tajemnicy uchyliłoby przeanalizowanie plików wasm, ale sami zobaczcie jak to wygląda.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wasm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wasm2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kolejny fragment wart uwagi to komponent NavLink.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;builder.OpenComponent\&amp;lt;NavLink\&amp;gt;(41); builder.AddAttribute(42, &quot;class&quot;, &quot;nav-link&quot;); builder.AddAttribute(43, &quot;href&quot;, &quot;fetchdata&quot;); builder.AddAttribute(44, &quot;ChildContent&quot;, (MulticastDelegate) (builder2 =\&amp;gt; builder2.AddMarkupContent(45, &quot;\n\&amp;lt;span class=\&quot;oi oi-list-rich\&quot; aria-hidden=\&quot;true\&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Fetch data\n&quot;))); builder.CloseComponent();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NavLink jest to wbudowany w blazora komponent do tworzenia linków.&lt;/p&gt;

&lt;p&gt;W pliku NavMenu.cshtml wygląda to tak:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&amp;lt;NavLink class=&quot;nav-link&quot; href=&quot;&quot; Match=NavLinkMatch.Prefix\&amp;gt; \&amp;lt;span class=&quot;oi oi-home&quot; aria-hidden=&quot;true&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Home \&amp;lt;/NavLink\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Można mu ustawić atrybut Match (niestety intellisense nie podpowiedziało mi wszystkich wartości (na dziś są to All i Prefix) ). Kiedy url pasuje do aktualnego adresu do linku jest dodawana klasa “active”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&amp;lt;ul class=&quot;nav flex-column&quot;\&amp;gt; \&amp;lt;li class=&quot;nav-item px-3&quot;\&amp;gt; \&amp;lt;!--!--\&amp;gt;\&amp;lt;a class=&quot;nav-link active&quot; href=&quot;counter&quot;\&amp;gt;\&amp;lt;!--!--\&amp;gt; \&amp;lt;span class=&quot;oi oi-plus&quot; aria-hidden=&quot;true&quot;\&amp;gt;\&amp;lt;/span\&amp;gt; Counter \&amp;lt;/a\&amp;gt; \&amp;lt;/li\&amp;gt; \&amp;lt;/ul\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Więcej o navlink:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blazor.net/api/Microsoft.AspNetCore.Blazor.Routing.NavLink.html&quot;&gt;dokumentacja&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://learn-blazor.com/pages/router/#links&quot;&gt;kurs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Koncepcja jest bardzo ciekawa i nie ukrywam, że mi się podoba.&lt;/p&gt;

&lt;p&gt;W końcu po dłuższej przerwie zdecydowałem się napisać artykuł akurat o Blazor’ze ;)&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;Artur&quot;, &quot;email&quot;=&gt;&quot;artur@sienicki.org&quot;, &quot;display_name&quot;=&gt;&quot;Artur Sienicki&quot;, &quot;first_name&quot;=&gt;&quot;Artur&quot;, &quot;last_name&quot;=&gt;&quot;Sienicki&quot;}</name><email>artur@sienicki.org</email></author><category term="Blazor" /><category term="WebAssembly" /><summary type="html">W ostatnich dniach na “ołpen spejsach” i “salonach internetowych” tematem numer 1 jest WebAssembly.</summary></entry><entry><title type="html">This post demonstrates post long post</title><link href="http://localhost:4000/personal/2017/11/19/super-long-article.html" rel="alternate" type="text/html" title="This post demonstrates post long post" /><published>2017-11-19T10:05:23+01:00</published><updated>2017-11-19T10:05:23+01:00</updated><id>http://localhost:4000/personal/2017/11/19/super-long-article</id><content type="html" xml:base="http://localhost:4000/personal/2017/11/19/super-long-article.html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;</content><author><name>John Doe</name></author><category term="personal" /><summary type="html">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</summary></entry><entry><title type="html">Welcome to devlopr!</title><link href="http://localhost:4000/personal/2017/11/19/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to devlopr!" /><published>2017-11-19T10:05:23+01:00</published><updated>2017-11-19T10:05:23+01:00</updated><id>http://localhost:4000/personal/2017/11/19/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/personal/2017/11/19/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Sujay Kundu</name></author><category term="personal" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">This post demonstrates post content styles</title><link href="http://localhost:4000/personal/2017/11/19/this-post-demonstrates-post-content-styles.html" rel="alternate" type="text/html" title="This post demonstrates post content styles" /><published>2017-11-19T10:05:23+01:00</published><updated>2017-11-19T10:05:23+01:00</updated><id>http://localhost:4000/personal/2017/11/19/this-post-demonstrates-post-content-styles</id><content type="html" xml:base="http://localhost:4000/personal/2017/11/19/this-post-demonstrates-post-content-styles.html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.&lt;/p&gt;

&lt;h2 id=&quot;some-great-heading-h2&quot;&gt;Some great heading (h2)&lt;/h2&gt;

&lt;p&gt;Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu.&lt;/p&gt;

&lt;p&gt;Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;h2 id=&quot;another-great-heading-h2&quot;&gt;Another great heading (h2)&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.&lt;/p&gt;

&lt;h3 id=&quot;some-great-subheading-h3&quot;&gt;Some great subheading (h3)&lt;/h3&gt;

&lt;p&gt;Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum.&lt;/p&gt;

&lt;p&gt;Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.&lt;/p&gt;

&lt;h3 id=&quot;some-great-subheading-h3-1&quot;&gt;Some great subheading (h3)&lt;/h3&gt;

&lt;p&gt;Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This quote will change your life. It will reveal the secrets of the universe, and all the wonders of humanity. Don’t misuse it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.&lt;/p&gt;

&lt;h3 id=&quot;some-great-subheading-h3-2&quot;&gt;Some great subheading (h3)&lt;/h3&gt;

&lt;p&gt;Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.&lt;/p&gt;

&lt;h4 id=&quot;you-might-want-a-sub-subheading-h4&quot;&gt;You might want a sub-subheading (h4)&lt;/h4&gt;

&lt;p&gt;In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.&lt;/p&gt;

&lt;p&gt;In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.&lt;/p&gt;

&lt;h4 id=&quot;but-its-probably-overkill-h4&quot;&gt;But it’s probably overkill (h4)&lt;/h4&gt;

&lt;p&gt;In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.&lt;/p&gt;

&lt;h3 id=&quot;oh-hai-an-unordered-list&quot;&gt;Oh hai, an unordered list!!&lt;/h3&gt;

&lt;p&gt;In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First item, yo&lt;/li&gt;
  &lt;li&gt;Second item, dawg&lt;/li&gt;
  &lt;li&gt;Third item, what what?!&lt;/li&gt;
  &lt;li&gt;Fourth item, fo sheezy my neezy&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oh-hai-an-ordered-list&quot;&gt;Oh hai, an ordered list!!&lt;/h3&gt;

&lt;p&gt;In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First item, yo&lt;/li&gt;
  &lt;li&gt;Second item, dawg&lt;/li&gt;
  &lt;li&gt;Third item, what what?!&lt;/li&gt;
  &lt;li&gt;Fourth item, fo sheezy my neezy&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;headings-are-cool-h2&quot;&gt;Headings are cool! (h2)&lt;/h2&gt;

&lt;p&gt;Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;p&gt;Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;p&gt;Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Title 1&lt;/th&gt;
      &lt;th&gt;Title 2&lt;/th&gt;
      &lt;th&gt;Title 3&lt;/th&gt;
      &lt;th&gt;Title 4&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem&lt;/td&gt;
      &lt;td&gt;lorem ipsum&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Title 1&lt;/th&gt;
      &lt;th&gt;Title 2&lt;/th&gt;
      &lt;th&gt;Title 3&lt;/th&gt;
      &lt;th&gt;Title 4&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem&lt;/td&gt;
      &lt;td&gt;lorem ipsum&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem ipsum dolor sit amet&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit amet consectetur&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit amet&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem ipsum dolor&lt;/td&gt;
      &lt;td&gt;lorem ipsum&lt;/td&gt;
      &lt;td&gt;lorem&lt;/td&gt;
      &lt;td&gt;lorem ipsum&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lorem ipsum dolor&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit amet&lt;/td&gt;
      &lt;td&gt;lorem ipsum dolor sit amet consectetur&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>John Doe</name></author><category term="personal" /><summary type="html">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</summary></entry><entry><title type="html">Windows Auth i browser</title><link href="http://localhost:4000/windows-auth-i-browser/" rel="alternate" type="text/html" title="Windows Auth i browser" /><published>2017-11-09T00:05:41+01:00</published><updated>2017-11-09T00:05:41+01:00</updated><id>http://localhost:4000/windows-auth-i-browser</id><content type="html" xml:base="http://localhost:4000/windows-auth-i-browser/">&lt;p&gt;Dzisiaj omówię jak prawidłowo skonfigurować &lt;strong&gt;uwierzytelnianie windows&lt;/strong&gt; aplikacji intranetowej hostowanej na IIS.&lt;/p&gt;

&lt;p&gt;Jaki może być z tym problem? To już zależy co chcemy osiągnąć [wp-svg-icons icon=”smiley” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Wszyscy wiemy, że z IIS’a należy wybrać site-&amp;gt;authentication i włączyć “Windows Authentication”. Cała reszta wedle upodobań.&lt;/p&gt;

&lt;p&gt;No dobra, ale hostuje aplikacje na IIS w domenie &lt;strong&gt;pluszowy.mis&lt;/strong&gt; dostępną pod adresem &lt;strong&gt;http://superapka.pluszowy.mis&lt;/strong&gt; (nawet mam skonfigurowane AD CS i certyfikat dla serwera &lt;strong&gt;mojiis.superapka.pluszowy.mis&lt;/strong&gt; i nazwy dns: &lt;strong&gt;http://superapka.pluszowy.mis&lt;/strong&gt; ) iii… na stacji roboczej &lt;strong&gt;koralgol.pluszowy.mis&lt;/strong&gt; (również podpiętej do domeny  &lt;strong&gt;pluszowy.mis&lt;/strong&gt; ) uruchamiam przeglądarkę i wpisuje adres  &lt;strong&gt;http://superapka.pluszowy.mis  -&amp;gt;&lt;/strong&gt; tadadada [wp-svg-icons icon=”bullhorn” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Czy to Internet Explorer czy Chrome - zostanę poproszony o podanie swoich danych do logowania… ok… ale po co? Przecież jestem w domenie, mój system wie kim jestem![wp-svg-icons icon=”shocked” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Zanim przejdę dalej - dodam tylko, że strona intranetowa  &lt;strong&gt;http://superapka.pluszowy.mis&lt;/strong&gt; nie potrzebuje się bawić w delegację uprawnień na wiele “hopów”, więc poniższy krok wykonuje z pełną świadomością tego co robię [wp-svg-icons icon=”grin” wrap=”i”]&lt;/p&gt;

&lt;p&gt;W miejscu w którym skończyliśmy poprzedni krok w IIS - przechodzimy do “providers” dla “Windows Authentication”. Na liście domyślnie znajduje się Negotiate i NTLM.&lt;/p&gt;

&lt;p&gt;Super! To teraz wystarczy, że NTLM będzie na liście pierwszy. Restart site-puli-IIS’a-7xctrl+shift+F5 mambojumbo…. odpalam  &lt;strong&gt;http://superapka.pluszowy.mis&lt;/strong&gt; w IE i dalej żąda poświadczeń [wp-svg-icons icon=”neutral” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Dzieje się tak ponieważ z jakiegoś magicznego powodu moja stacja robocza  &lt;strong&gt;koralgol.pluszowy.mis&lt;/strong&gt;   nie rozpoznaje strony &lt;strong&gt;http://superapka.pluszowy.mis&lt;/strong&gt;  jako strony intranetowej w domenie.. niah.&lt;/p&gt;

&lt;p&gt;Na taką ewentualność jest prosty trik - trzeba mieć chyba nawet administratora żeby to zrobić (ale to tak na 50%) [wp-svg-icons icon=”wink” wrap=”i”]&lt;/p&gt;

&lt;p&gt;IE-&amp;gt;settings-&amp;gt;Internet Options-&amp;gt;Security-&amp;gt; wybieramy “ &lt;strong&gt;Local intranet&lt;/strong&gt;” -&amp;gt; Sites -&amp;gt; (&lt;em&gt;pewnie masz wszystko zaznaczone - a nawet jak nie masz i zaznaczysz to nie rozwiąże to Twojego problemu&lt;/em&gt;) -&amp;gt; advanced-&amp;gt; i teraz wpisujemy adres bez protokołu “ &lt;strong&gt;superapka.pluszowy.mis&lt;/strong&gt;” -&amp;gt; add -&amp;gt; close -&amp;gt; ok -&amp;gt;ok-&amp;gt; save -&amp;gt; poślinić palec -&amp;gt; F5&lt;/p&gt;

&lt;p&gt;Teraz… w IE coś się dzieje. Strona  &lt;strong&gt;http://superapka.pluszowy.mis&lt;/strong&gt; została załadowana bez pytania o poświadczenia windows. Yupi! Windows sam sobie poradził - zuch!&lt;/p&gt;

&lt;p&gt;No dobrze. To teraz pragnąc dokonać eskalacji sukcesu odpalam stronę  &lt;strong&gt;http://superapka.pluszowy.mis&lt;/strong&gt;  w przeglądarce gogiela Chrome’a.&lt;/p&gt;

&lt;p&gt;I co? Ku mojemu zdziwieniu (mam nadzieję, że waszemu też) okazuje się, że Chrome dalej prosi o hasło do Windows’a…&lt;/p&gt;

&lt;p&gt;Kończąc tą wydłużającą się narrację przygody rodem z komedii kryminalnej - wystarczy, że wrócimy do IIS’a i z listy “ &lt;strong&gt;Providers&lt;/strong&gt;” tam gdzie jest NTLM i Negotiate - usuniemy “ &lt;strong&gt;Negotiate&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;Tak! Pewnie to zrobiłeś! PoolRecycle, Website restart i IIS reset - i to z konsoli, restart chrome - nowa zakładka incognito - ślinimy palec i wprowadzamy jeszcze raz adres:  &lt;strong&gt;http://superapka.pluszowy.mis &lt;/strong&gt; tylko tym razem nie kopiując, a pisząc to samodzielnie - liczymy na magiczną moc wstukanych klawiszy… strona się ładuje. Chrome nie prosi o dane windows’a - sam przekazuje uprawnienia.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Podsumowując&lt;/strong&gt; i wyciągając z mojej zabawy narracyjnej &lt;strong&gt;mięsko&lt;/strong&gt; :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“Windows Authentication” - enabled&lt;/li&gt;
  &lt;li&gt;“Windows Authentication”-&amp;gt; providers - tylko NTLM&lt;/li&gt;
  &lt;li&gt;IE-&amp;gt;settings-&amp;gt;Internet Options-&amp;gt;Security-&amp;gt; wybieramy “ &lt;strong&gt;Local intranet&lt;/strong&gt;” -&amp;gt; Sites -&amp;gt; advanced-&amp;gt; ” &lt;strong&gt;superapka.pluszowy.mis&lt;/strong&gt;” -&amp;gt; add -&amp;gt; close -&amp;gt; ok/save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Na koniec ciekawostka… z racji tego, że lubię Kerberosa chociaż niezbadane są ścieżki jego ticketów… okazało się, że przy Providers ustawionym na Negotiate aplikacja nie pyta o dane logowanie kiedy dostaje się do niej po adresie &lt;strong&gt;fakemis.dnstypua&lt;/strong&gt;… [wp-svg-icons icon=”shocked” wrap=”i”] Czyżby dostawanie się do aplikacji po pełnym adresie będącym jednocześnie prawdziwym pełnym adresem serwera nie było dobrym pomysłem? [wp-svg-icons icon=”cloud-5” wrap=”i”]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do testów wykorzystałem:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Windows 10&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Windows Server 2016&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rerozkmince&lt;/em&gt;&lt;/strong&gt; towarzyszyły rytmy “&lt;a href=&quot;http://www.youtube.com/watch?v=RPMTZfNSXYQ&quot;&gt;Best of ELECTRO SWING Mix September 2017&lt;/a&gt;” - przyjemnie i pozytywnie [wp-svg-icons icon=”headphones” wrap=”i”] [wp-svg-icons icon=”wink” wrap=”i”]&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;Artur&quot;, &quot;email&quot;=&gt;&quot;artur@sienicki.org&quot;, &quot;display_name&quot;=&gt;&quot;Artur Sienicki&quot;, &quot;first_name&quot;=&gt;&quot;Artur&quot;, &quot;last_name&quot;=&gt;&quot;Sienicki&quot;}</name><email>artur@sienicki.org</email></author><category term="credentials" /><category term="kerberos" /><category term="negotiate" /><category term="NTLM" /><category term="password" /><category term="prompt" /><category term="Windows Authentication" /><summary type="html">Dzisiaj omówię jak prawidłowo skonfigurować uwierzytelnianie windows aplikacji intranetowej hostowanej na IIS.</summary></entry><entry><title type="html">Delegacja w AD i IIS</title><link href="http://localhost:4000/delegacja-w-ad-i-iis/" rel="alternate" type="text/html" title="Delegacja w AD i IIS" /><published>2017-05-18T23:39:01+02:00</published><updated>2017-05-18T23:39:01+02:00</updated><id>http://localhost:4000/delegacja-w-ad-i-iis</id><content type="html" xml:base="http://localhost:4000/delegacja-w-ad-i-iis/">&lt;p&gt;Dziś zamierzam opisać proces delegacji pomiędzy witrynami na różnych serwerach w kontekście jednej domeny.&lt;/p&gt;

&lt;p&gt;Po co? Generalnie wymyśliłem sobie przypadek w którym mam aplikację numer 1 i aplikację numer 2. Authentication w obu aplikacjach jest ustawione na “Windows Authentication”. W app1 wyświetlam aktualnego użytkownika używając:&lt;/p&gt;

&lt;p&gt;@User.Identity.Name w widoku MVC.&lt;/p&gt;

&lt;p&gt;App2 będzie zwracać poprzez web api również aktualnego użytkownika. Całą sytuację możemy zasymulować poprzez kod zaprezentowany poniżej. Zwykły kontroler:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public class HomeController : Controller
{
  public string Index()
  {
    return User.Identity.Name;
  }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;public string Go(string id)&lt;br /&gt;
 {&lt;br /&gt;
 var client = new RestClient($”http://{id}”);&lt;br /&gt;
 var request = new RestRequest(“api/values”, Method.GET)&lt;br /&gt;
 {&lt;br /&gt;
 UseDefaultCredentials = true&lt;br /&gt;
 };&lt;/p&gt;

&lt;p&gt;var response = client.Execute(request);&lt;/p&gt;

&lt;p&gt;var content = response.Content;&lt;/p&gt;

&lt;p&gt;return content;&lt;br /&gt;
 }&lt;br /&gt;
}&lt;br /&gt;
oraz kontroler web api:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;public class ValuesController : ApiController
{
  public string Get()
  {
    return User.Identity.Name;
  }
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instalując aplikację na IIS wykonując akcje Index i Go dostaniemy 2 różne wyniki.&lt;br /&gt;
Index zwróci mi aktualnie zalogowanego użytkownika - czyli “Artur”, a Go zwróci użytkownika który jest ustawiony na puli aplikacji.&lt;/p&gt;

&lt;p&gt;http://webserver/Home/Go/webserver -&amp;gt; IISPoolUser&lt;br /&gt;
http://webserver/home/index -&amp;gt; Artur&lt;/p&gt;

&lt;p&gt;W takim razie jak to zrobić, żeby mimo wszystko http://webserver/Home/Go/webserver zwracał użytkownika Artur?&lt;/p&gt;

&lt;p&gt;Po pierwsze do web.config należy dodać wpis:&lt;br /&gt;
`&lt;/p&gt;
&lt;authentication mode=&quot;Windows&quot; /&gt;

&lt;identity impersonate=&quot;true&quot; /&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;W Active Directory należy ustawić delegację dla użytkownika który jest ustawiony na puli naszej aplikacji.&lt;br /&gt;
Delegację można dodać dopiero wtedy kiedy na naszym użytkowniku jest ustawiony SPN.&lt;br /&gt;
SPN ustawiamy w ten sposób:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;setspn -s HTTP/nazwa_serwera_www moja_domena\użytkownik_puli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Aby ustawić delegację w ADUC (Active Directory Users and Computers) wybieramy użytkownika technicznego użytkownik_puli i przechodzimy do zakładki delegacji, która powinna się pojawić po ustawieniu SPN’ów. Wybieramy “Trust this user for delegation to specified services only” - i dodajemy nową usługę - wybieramy komputer/maszynę na którym jest zainstalowany nasz IIS i wybieramy usługę HTTP. Zapisujemy zmiany i to już koniec.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/delegation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Po tych operacjach http://webserver/Home/Go/webserver i http://webserver/home/index zwracają tego samego użytkownika.&lt;/p&gt;

&lt;p&gt;Na 2 hop’y, przekazywanie uprawnień działa bez SPN’a, powyżej 2 “mykiem” jest właśnie SPN żeby zadziałało [wp-svg-icons icon=”smiley” wrap=”i”]&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;Artur&quot;, &quot;email&quot;=&gt;&quot;artur@sienicki.org&quot;, &quot;display_name&quot;=&gt;&quot;Artur Sienicki&quot;, &quot;first_name&quot;=&gt;&quot;Artur&quot;, &quot;last_name&quot;=&gt;&quot;Sienicki&quot;}</name><email>artur@sienicki.org</email></author><summary type="html">Dziś zamierzam opisać proces delegacji pomiędzy witrynami na różnych serwerach w kontekście jednej domeny.</summary></entry><entry><title type="html">AD CS i Code Signing</title><link href="http://localhost:4000/ad-cs-i-code-signing/" rel="alternate" type="text/html" title="AD CS i Code Signing" /><published>2017-02-02T01:06:43+01:00</published><updated>2017-02-02T01:06:43+01:00</updated><id>http://localhost:4000/ad-cs-i-code-signing</id><content type="html" xml:base="http://localhost:4000/ad-cs-i-code-signing/">&lt;p&gt;Cel:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Zdobycie certyfikatu do podpisywania kodu. Podpisany kod będzie działał tylko w domenie firmowej.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jak można podejść do tematu?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Kupić sobie swój własny certyfikat programistyczny i nim podpisać stworzoną aplikację - głównym urzędem certyfikacji będzie verisign czy digicert - generalnie wymaganie zostanie spełnione. Cert jest poprawny i wszystko hula. Płaci się tylko wcale nie małe pieniądze - w tej chwili na rok można taki certyfikat wygenerować za 178$ (bez “Instant Reputation with Microsoft Smartscreen Filter”), a z 331$. Niby biedni nie jesteśmy, ale to i tak znaczna kwota.&lt;/li&gt;
  &lt;li&gt;Wygenerować certyfikat poprzez AD CS - (&lt;a href=&quot;http://social.technet.microsoft.com/wiki/contents/articles/1137.active-directory-certificate-services-ad-cs-introduction.aspx&quot;&gt;Active Directory Certificate Services&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pochylę się dzisiaj i podzielę tą jakże tajemną wiedzą jak zdobyć certyfikat w domenie.&lt;/p&gt;

&lt;p&gt;Zanim zaczniesz - oczywiście musisz mieć przygotowaną infrastrukturę - masz firmę - masz bizspark’a - pikuś, nie? coś wymyślisz [wp-svg-icons icon=”smiley” wrap=”i”] Potrzebujemy domeny oraz zainstalowanego i skonfigurowanego AD CS. &lt;a href=&quot;http://www.virtuallyboring.com/setup-microsoft-active-directory-certificate-services-ad-cs/&quot;&gt;Instalacja i konfiguracja jest klikalna - z tym nie ma żadnych powazniejszych problemów&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[1] Generowanie kodu CSR. Czym jest kod CSR? Z ang. “żądanie podpisania certyfikatu” (Certificate Signing Request).&lt;/p&gt;

&lt;p&gt;Jak się to robi?&lt;/p&gt;

&lt;p&gt;Na swojej zwykłej stacji roboczej uruchom nowe zadanie (win+R), wpisz w okienko &lt;strong&gt;mmc&lt;/strong&gt;. Dodaj/usuń przystawkę, wybierz certyfikaty-&amp;gt;“Moje konto użyszkodnika” i ok.&lt;/p&gt;

&lt;p&gt;Rozwijamy drzewo certyfikatów i przechodzimy do Osobisty/Certyfikaty.&lt;/p&gt;

&lt;p&gt;Klikamy prawym myszy na certyfikaty, wybieramy “wszystkie zadania”-&amp;gt;“Operacje zaawansowane”-&amp;gt;“Utwórz żądanie niestandardowe..”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CSR.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pojawia się piękne okienko z opisem rejestracji certyfikatów, przeklikujemy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/csr1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wybieramy zasady rejestracji certyfikatu na te z usługi Active Directory i przechodzimy dalej.&lt;br /&gt;
 &lt;img src=&quot;/assets/images/csr2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Następnie wybieramy szablon żądania certyfikacyjnego. W moim przypadku chce certyfikat do podpisywania kodu - to wybieram nomen omen: “Podpisywanie kodu”. Uwaga! W tym miejscu dostępne są tylko standardowe szablony - i tak wybieramy - bo przykład dotyczy mojej domeny, ale zdarzyło mi się już wygenerować CSR z takiego szablonu - i został on odrzucony przez admin’a, bo on zdefiniował swoje własne szablony… w tym przypadku należy powiedzieć adminowi żeby sam sobie wygenerował CSR [wp-svg-icons icon=”tongue” wrap=”i”]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/csr3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Po wybraniu szablonu możemy teraz zająć się właściwościami naszego CSR. Klikamy właściwości - zasad rejestracji usługi Active Directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/csr4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wypełniamy przyjazną nazwę + opis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/csr5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wybieramy dane do certyfikatu. Ja wypełniłem prawie wszystko.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CSR6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zaznaczamy, że chcemy eksportować klucz prywatny.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/csr7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I zapisujemy do pliku.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CSR8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;W widoku “przystawki” w żądaniach rejestracji certyfikatu powinniśmy zobaczyć nasz “pusty” certyfikat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/csr9-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[2] Podpisanie CSR w CA (Certification Authority)&lt;/p&gt;

&lt;p&gt;Uruchamiamy na serwerze CA. Prawym-&amp;gt; “All Tasks”-&amp;gt;“Submit new request”. Wybieramy CSR, który stworzyliśmy w kroku 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CA1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Po zaimportowaniu CSR’a, pojawi się on nam w folderze “Pending Request”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ca2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To co teraz musimy zrobić to right click na certyfikacie i wybieramy issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CA3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nasz certyfikat pojawi się teraz w folderze Issued Certificates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CA4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zostało teraz tylko wyeksportować klucz publiczny. Można to zrobić np. przez dwuklik certyfikatu oraz kliknięciu “copy to file”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ca5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wyeksportowany klucz przenosimy na maszynę na której wygenerowaliśmy CSR’a i instalujemy w lokalizacji w której podpowiada instalator.&lt;/p&gt;

&lt;p&gt;Odświeżamy widok w mmc z certyfikatami. Mamy nowy podpisany certyfikat z eksportowalnym kluczem prywatnym. Teraz można go użyć np. do podpisania addin’a czy stworzenia certyfikatu w formacie snk do podpisywania bibliotek.&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;Artur&quot;, &quot;email&quot;=&gt;&quot;artur@sienicki.org&quot;, &quot;display_name&quot;=&gt;&quot;Artur Sienicki&quot;, &quot;first_name&quot;=&gt;&quot;Artur&quot;, &quot;last_name&quot;=&gt;&quot;Sienicki&quot;}</name><email>artur@sienicki.org</email></author><category term="AD CS" /><category term="CA" /><category term="Code signing" /><summary type="html">Cel:</summary></entry><entry><title type="html">LibreLink w PL - ale jak?</title><link href="http://localhost:4000/librelink-w-pl/" rel="alternate" type="text/html" title="LibreLink w PL - ale jak?" /><published>2017-01-22T20:28:11+01:00</published><updated>2017-01-22T20:28:11+01:00</updated><id>http://localhost:4000/librelink-w-pl</id><content type="html" xml:base="http://localhost:4000/librelink-w-pl/">&lt;p&gt;Cześć,&lt;/p&gt;

&lt;p&gt;Jakiś czas temu pisałem o nowym systemie ciągłego monitorowania glikemii - &lt;a href=&quot;http://sienicki.org/freestyle-libre/&quot; title=&quot;FreeStyle Libre&quot;&gt;FreeStyle Libre&lt;/a&gt;. Narzekałem na brak oficjalnej aplikacji do mierzenia cukru… skoro to NFC to dlaczego nie?&lt;/p&gt;

&lt;p&gt;Ostatnio natrafiłem na &lt;a href=&quot;http://librelink.com/&quot;&gt;LibreLink&lt;/a&gt;z tym, że jest ona ograniczona w sklepie do wybranych lokalizacji. Dowiedziałem się, że te lokalizacje to UK i Irlandia.&lt;/p&gt;

&lt;p&gt;Ściągnąłem, działa i teraz skanuję cukry żony smartfonem :)&lt;/p&gt;

&lt;p&gt;To co mi się nie podoba w aplikacji to to, że w ciągu godziny od aktywowania sensora czytnikiem trzeba go również aktywować na telefonie - potem już nie będzie to możliwe.&lt;/p&gt;

&lt;p&gt;Poza tym jednostki w których skanuje są angielskie - nie widziałem opcji zmiany.&lt;/p&gt;

&lt;p&gt;Jak ściągnąłem tą aplikację, skoro siedzę w Warszawie?&lt;/p&gt;

&lt;p&gt;Poniżej przygotowałem krótką instrukcję jak to zrobić.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ściągnij aplikację np. “&lt;a href=&quot;http://play.google.com/store/apps/details?id=com.freevpn.vpn_master&quot;&gt;VPN Master&lt;/a&gt;” - istotne żeby VPN mógł się łączyć z serwerami w UK&lt;/li&gt;
  &lt;li&gt;W ustawieniach androida przejdź do zakładki konta i usuń konto google - (jeżeli masz więcej niż jedno, to usuń to którego używasz do ściągania aplikacji)&lt;/li&gt;
  &lt;li&gt;Otwórz aplikację VPN’a - połącz się z serwerem “United Kingdom”&lt;/li&gt;
  &lt;li&gt;Możesz sprawdzić przez przeglądarkę jakie masz ip - check your IP - powinno być z lokalizacji UK&lt;/li&gt;
  &lt;li&gt;Ja nadgorliwie usunąłem dane aplikacji “sklep”, ale teoretycznie nie jest to konieczne (ustawienia - aplikacje - wyczyść dane)&lt;/li&gt;
  &lt;li&gt;Otwórz aplikację sklep i utwórz konto - wypełnij pola formularza - w polu lokalizacja wybierz UK, sposób płatności pomiń&lt;/li&gt;
  &lt;li&gt;przejdź do aplikacji “&lt;a href=&quot;http://play.google.com/store/apps/details?id=com.librelink.app&quot;&gt;LibreLink&lt;/a&gt;”, ściągnij i ciesz się działaniem&lt;/li&gt;
  &lt;li&gt;teraz albo usuń nowo założone konto google’a - albo zostaw je i dodaj stare&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/libra-smileD.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;Artur&quot;, &quot;email&quot;=&gt;&quot;artur@sienicki.org&quot;, &quot;display_name&quot;=&gt;&quot;Artur Sienicki&quot;, &quot;first_name&quot;=&gt;&quot;Artur&quot;, &quot;last_name&quot;=&gt;&quot;Sienicki&quot;}</name><email>artur@sienicki.org</email></author><category term="FreeStyle Libre" /><category term="librelink" /><summary type="html">Cześć,</summary></entry><entry><title type="html">Lazy brain i EF</title><link href="http://localhost:4000/lazy-brain-i-ef/" rel="alternate" type="text/html" title="Lazy brain i EF" /><published>2016-12-15T21:58:12+01:00</published><updated>2016-12-15T21:58:12+01:00</updated><id>http://localhost:4000/lazy-brain-i-ef</id><content type="html" xml:base="http://localhost:4000/lazy-brain-i-ef/">&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;Dzisiejszy post jest zadedykowany lazy loadingu i brain fucku jaki mieli koledzy 5 minut przed “końcem prac deweloperskich” [wp-svg-icons icon=”wink” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Technicznie i żołniersko.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Projekt: .NET&lt;/li&gt;
  &lt;li&gt;ORM: EF&lt;/li&gt;
  &lt;li&gt;Moc: Lazy Loading&lt;/li&gt;
  &lt;li&gt;Problem: Lazy Things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To może na początek kawałek kodu:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using (var db = new ContosoTestContext()) { var category = db.Categories.First(x =\&amp;gt; x.Articles.Any()); if (category.Articles.Any()){} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Piękny, czysty i jakże podręcznikowo-szkolny przykład.&lt;/p&gt;

&lt;p&gt;Ile zapytań poleci do bazy danych?&lt;/p&gt;

&lt;p&gt;Ile rekordów dostanie aplikacja?&lt;/p&gt;

&lt;p&gt;Paczasz? I co? 2 razy? &lt;em&gt;Jakby było 2 razy to by nie pisał posta&lt;/em&gt; [wp-svg-icons icon=”wink” wrap=”i”]&lt;/p&gt;

&lt;p&gt;A no piszę! Bo właśnie do bazy idą 2 query… ale za to jakie [wp-svg-icons icon=”tongue” wrap=”i”]&lt;/p&gt;

&lt;p&gt;W pierwszej linijce pobieram z bazy jeden rekord kategorii. A w drugiej linijce &lt;em&gt;jeżeli nic nie zmienialiście w waszym kontekście bazy danych z lazy loading, bo domyślnie wartość Configuration.LazyLoadingEnabled jest ustawiona na true&lt;/em&gt; - to… zostaną pobrane wszystkie artykuły z bazy danych do pamięci, a dopiero potem zostanie wykonane polecenie Any.&lt;/p&gt;

&lt;p&gt;Chyba nie muszę pisać, jak bardzo opłakane w skutkach jest użycie powyższego kodu… brr!&lt;/p&gt;

&lt;p&gt;Żeby nie być gołosłownym to 1 query wygląda tak:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT TOP (1) [Extent1].[Id] AS [Id], [Extent1].[Name] AS [Name] FROM [dbo].[Categories] AS [Extent1] WHERE EXISTS (SELECT 1 AS [C1] FROM [dbo].[Articles] AS [Extent2] WHERE [Extent1].[Id] = [Extent2].[CategoryId] )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a 2 query w ten sposób:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [Extent1].[Id] AS [Id], [Extent1].[Name] AS [Name], [Extent1].[CategoryId] AS [CategoryId] FROM [dbo].[Articles] AS [Extent1] WHERE [Extent1].[CategoryId] = @EntityKeyValue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tak więc, pierwsze zapytanie zwróci faktycznie jeden rekord z bazy, ale za to drugie zwróci &lt;strong&gt;n&lt;/strong&gt;  rekordów.&lt;/p&gt;

&lt;p&gt;Dlaczego? Lazy loading - czyli leniwe ładowanie, pobiera tylko te dane które są nam aktualnie potrzebne, a my przez napisanie  &lt;strong&gt;category.Articles&lt;/strong&gt; wywołujemy geciora, który z kolei wywołuje groźnego &lt;em&gt;Wielkiego Pana i Mistrza Materializatora!!!&lt;/em&gt; [wp-svg-icons icon=”evil-2” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Jak się przed tym uchronić? Uważać… bardzo uważać. Na przykład przy składniach tego typu używać bardziej kontekstu, niż kontekstu który jest powiązany z obiektem, bo tak jak wyżej - można się zdziwić.&lt;/p&gt;

&lt;p&gt;To może teraz poprawne użycie Any:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using (var db = new ContosoTestContext()) { var category = db.Categories.First(x =\&amp;gt; x.Articles.Any()); if (db.Articles.Any(x=\&amp;gt;x.CategoryId== category.Id)) { } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I to wyśle 2 zapytania i zwróci 2 rekordy.&lt;/p&gt;

&lt;p&gt;Query 1:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT TOP (1) [Extent1].[Id] AS [Id], [Extent1].[Name] AS [Name] FROM [dbo].[Categories] AS [Extent1] WHERE EXISTS (SELECT 1 AS [C1] FROM [dbo].[Articles] AS [Extent2] WHERE [Extent1].[Id] = [Extent2].[CategoryId] )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Query 2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT CASE WHEN ( EXISTS (SELECT 1 AS [C1] FROM [dbo].[Articles] AS [Extent1] WHERE [Extent1].[CategoryId] = 2 )) THEN cast(1 as bit) ELSE cast(0 as bit) END AS [C1] FROM ( SELECT 1 AS X ) AS [SingleRowTable1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bardzo dziękuję wszystkim za uwagę.&lt;/p&gt;

&lt;p&gt;PS. Ciekawe ile razy wy złapaliście się na takim brain fuck’u [wp-svg-icons icon=”grin” wrap=”i”]&lt;/p&gt;

&lt;p&gt;PS2. Nie szukajcie sensu biznesowego w przykładzie - to najlepszy przykład - bo żołnierski.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;Artur&quot;, &quot;email&quot;=&gt;&quot;artur@sienicki.org&quot;, &quot;display_name&quot;=&gt;&quot;Artur Sienicki&quot;, &quot;first_name&quot;=&gt;&quot;Artur&quot;, &quot;last_name&quot;=&gt;&quot;Sienicki&quot;}</name><email>artur@sienicki.org</email></author><category term="#BrainFuck" /><category term="Entity Framework" /><category term="Lazy Loading" /><category term="materializacja" /><summary type="html">Hello!</summary></entry><entry><title type="html">Andzia baby start</title><link href="http://localhost:4000/andzia-baby-start/" rel="alternate" type="text/html" title="Andzia baby start" /><published>2016-12-05T22:27:19+01:00</published><updated>2016-12-05T22:27:19+01:00</updated><id>http://localhost:4000/andzia-baby-start</id><content type="html" xml:base="http://localhost:4000/andzia-baby-start/">&lt;p&gt;Dzisiaj trochę z innej strony. Podzielę się z wami traumatycznym przeżyciem jakim było dla mnie odpalenie innego IDE niż VS. Rozpocząłem z czystej ciekawości, a może nawet potrzeby biznesowej - przygodę z pisaniem aplikacji w androidzie.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Podejście 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wczoraj odpaliłem android studio, udało mi się wgrać hello world na telefon, aby to zrobić musiałem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;zainstalować z “SDK Platforms” - Android 6.0&lt;/li&gt;
  &lt;li&gt;zainstalować z “SDK Tools” - Google USB Driver&lt;/li&gt;
  &lt;li&gt;stworzyć testowy projekt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Następnym moim celem było stworzenie prostego przycisku i podpięcie do niego zdarzenia [wp-svg-icons icon=”shocked” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Jakież było moje zdziwienie kiedy okazało się, że designer tutaj nie działa zbyt dobrze… pierwsza próba przypisania spaliła na panewce, bo andzia zrobiła mi coś takiego:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&amp;lt;Button android:text=&quot;Button&quot; android:layout\_width=&quot;wrap\_content&quot; android:layout\_height=&quot;wrap\_content&quot; android:id=&quot;@+id/button&quot; android:layout\_weight=&quot;1&quot; android:onClick=&quot;sendMessage (MainActivity)&quot; /\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A metoda nazywa się po prostu sendMessage… ok…  wywaliłem więc (MainActivity) i teraz działa. Cóż… dzisiaj już robiłem z &lt;a href=&quot;http://developer.android.com/training/index.html&quot;&gt;oficjalnego tutoriala&lt;/a&gt; [wp-svg-icons icon=”smiley” wrap=”i”]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Podejście 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Zrobiłem aplikację która wyświetla textBox i przycisk, a po kliknięciu wysyła na inną stronę/aktywność i wyświetla wpisany tekst, &lt;strong&gt;super&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Na pierwszy zgrzyt w oficjalnym tutorialu natrafiłem przy orientacji aktywności. Rzekomo wystarczyło dodać folder o nazwie layout-land i skopiować xml z layout, ale po dodaniu nie było go widać [wp-svg-icons icon=”confused” wrap=”i”] so… &lt;a href=&quot;http://stackoverflow.com/questions/29458189/android-studio-layout-land-folder-not-appearing&quot;&gt;stack..&lt;/a&gt;i już wiem, że miałem zaznaczony &lt;strong&gt;android&lt;/strong&gt; zamiast &lt;strong&gt;project! &lt;/strong&gt; Teraz mój projekt obsługuje również orientację poziomą - elegancko [wp-svg-icons icon=”cool” wrap=”i”]&lt;/p&gt;

&lt;p&gt;Istotne rzeczy:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[1]&lt;/strong&gt; identyfikatory kontrolek:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;android:id=”@+id/edit_message”&lt;/strong&gt; (strasznie brzydki zapis :P )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[2]&lt;/strong&gt; ciągi tekstowe z resource:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;android:text=”@string/button_send”   &lt;/strong&gt; (w res\values\strings.xml jest zapisany tak:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&amp;lt;resources\&amp;gt; ... \&amp;lt;string name=&quot;button\_send&quot;\&amp;gt;Send\&amp;lt;/string\&amp;gt; ... \&amp;lt;/resources\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;[3]&lt;/strong&gt; szerokość/wysokość -“prawie” auto - minimalna wielkość w której się zmieści kontrolka to:  &lt;strong&gt;wrap_content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; [4]&lt;/strong&gt; szerokość/wysokość maksymalny rozmiar rodzica to:  &lt;strong&gt;match_parent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; [5]&lt;/strong&gt; do przekazywania informacji między aktywnościami/stronami służy  &lt;strong&gt;Intent&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void sendMessage(View view) { Intent intent = new Intent(this, DisplayMessageActivity.class); EditText editText = (EditText) findViewById(R.id.edit\_message); String message = editText.getText().toString(); intent.putExtra(&quot;com.example.myfirstapp.MESSAGE&quot;, message); startActivity(intent); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;i odebrania w docelowej aktywności:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intent intent = getIntent(); String message = intent.getStringExtra(MainActivity.EXTRA\_MESSAGE); TextView textView = new TextView(this); textView.setTextSize(40); textView.setText(message); ViewGroup layout = (ViewGroup) findViewById(R.id.activity\_display\_message); layout.addView(textView);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;[6]&lt;/strong&gt; trzymanie stringów w różnych językach tutaj jest również banalne, wystarczy nowy folder z przyrostkiem skrótu języka np. values-pl/strings.xml&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;Artur&quot;, &quot;email&quot;=&gt;&quot;artur@sienicki.org&quot;, &quot;display_name&quot;=&gt;&quot;Artur Sienicki&quot;, &quot;first_name&quot;=&gt;&quot;Artur&quot;, &quot;last_name&quot;=&gt;&quot;Sienicki&quot;}</name><email>artur@sienicki.org</email></author><category term="Android" /><category term="baby problems" /><summary type="html">Dzisiaj trochę z innej strony. Podzielę się z wami traumatycznym przeżyciem jakim było dla mnie odpalenie innego IDE niż VS. Rozpocząłem z czystej ciekawości, a może nawet potrzeby biznesowej - przygodę z pisaniem aplikacji w androidzie.</summary></entry></feed>